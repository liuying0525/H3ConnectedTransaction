//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace DongZheng.H3.WebApi.xmapi {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="xmapiSoapBinding", Namespace="http://xmapi.webservices.ma.net263.com")]
    public partial class XmapiImplProxyService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getManagementDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDomainDisGroupUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteXmailuserExpiredOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback createDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback createDisGroupUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback regUser_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback regUser_MultiOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback delUser_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModPasswdOperationCompleted;
        
        private System.Threading.SendOrPostCallback modPasswd_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDirInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDirInfo_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback AspGetDomainUserlistOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModGidOperationCompleted;
        
        private System.Threading.SendOrPostCallback modGid_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticationOperationCompleted;
        
        private System.Threading.SendOrPostCallback authentication_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback authenticationManager_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback modStatus_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback modUserInfo_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback modUserInfoSupportMultiAliasOperationCompleted;
        
        private System.Threading.SendOrPostCallback modUserInfo_MultiOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback createDisGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteDisGroupUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback createDisGroupUser_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateDisGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteDisGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDisGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainUserlistOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDomainUserlist_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDomainUserlistAndAlias_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDomainUserlistByStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDomainUserlistGsoapOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDomainUserlistLengthGsoapOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSaasDomainUserlistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserInfo_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDisGroupUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllXmaillistOperationCompleted;
        
        private System.Threading.SendOrPostCallback getXmaillistByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback isXmailUserExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback regXmailListOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteXmailListByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateXmailListByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback modUserStatus_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback modDomainCos_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDomainInfo_newOperationCompleted;
        
        private System.Threading.SendOrPostCallback modDomainWeChatOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserByWechatOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveOrUpdateAppOperationCompleted;
        
        private System.Threading.SendOrPostCallback batdelAppOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllAppOperationCompleted;
        
        private System.Threading.SendOrPostCallback regUserAndGroupTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback modUserInfoAndGroupTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback regXmailListAndPriviOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateXmailListAndPriviOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public XmapiImplProxyService() {
            this.Url = global::DongZheng.H3.WebApi.Properties.Settings.Default.DongZheng_H3_WebApi_xmapi_XmapiImplProxyService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getVersionCompletedEventHandler getVersionCompleted;
        
        /// <remarks/>
        public event getManagementDomainCompletedEventHandler getManagementDomainCompleted;
        
        /// <remarks/>
        public event getDomainDisGroupUserCompletedEventHandler getDomainDisGroupUserCompleted;
        
        /// <remarks/>
        public event deleteXmailuserExpiredCompletedEventHandler deleteXmailuserExpiredCompleted;
        
        /// <remarks/>
        public event updateDepartmentCompletedEventHandler updateDepartmentCompleted;
        
        /// <remarks/>
        public event createDepartmentCompletedEventHandler createDepartmentCompleted;
        
        /// <remarks/>
        public event createDisGroupUserCompletedEventHandler createDisGroupUserCompleted;
        
        /// <remarks/>
        public event getDepartmentCompletedEventHandler getDepartmentCompleted;
        
        /// <remarks/>
        public event RegUserCompletedEventHandler RegUserCompleted;
        
        /// <remarks/>
        public event regUser_NewCompletedEventHandler regUser_NewCompleted;
        
        /// <remarks/>
        public event regUser_MultiCompletedEventHandler regUser_MultiCompleted;
        
        /// <remarks/>
        public event DelUserCompletedEventHandler DelUserCompleted;
        
        /// <remarks/>
        public event delUser_NewCompletedEventHandler delUser_NewCompleted;
        
        /// <remarks/>
        public event ModPasswdCompletedEventHandler ModPasswdCompleted;
        
        /// <remarks/>
        public event modPasswd_NewCompletedEventHandler modPasswd_NewCompleted;
        
        /// <remarks/>
        public event GetDirInfoCompletedEventHandler GetDirInfoCompleted;
        
        /// <remarks/>
        public event getDirInfo_NewCompletedEventHandler getDirInfo_NewCompleted;
        
        /// <remarks/>
        public event AspGetDomainUserlistCompletedEventHandler AspGetDomainUserlistCompleted;
        
        /// <remarks/>
        public event ModGidCompletedEventHandler ModGidCompleted;
        
        /// <remarks/>
        public event modGid_NewCompletedEventHandler modGid_NewCompleted;
        
        /// <remarks/>
        public event AuthenticationCompletedEventHandler AuthenticationCompleted;
        
        /// <remarks/>
        public event authentication_NewCompletedEventHandler authentication_NewCompleted;
        
        /// <remarks/>
        public event authenticationManager_NewCompletedEventHandler authenticationManager_NewCompleted;
        
        /// <remarks/>
        public event ModStatusCompletedEventHandler ModStatusCompleted;
        
        /// <remarks/>
        public event modStatus_NewCompletedEventHandler modStatus_NewCompleted;
        
        /// <remarks/>
        public event ModUserInfoCompletedEventHandler ModUserInfoCompleted;
        
        /// <remarks/>
        public event modUserInfo_NewCompletedEventHandler modUserInfo_NewCompleted;
        
        /// <remarks/>
        public event modUserInfoSupportMultiAliasCompletedEventHandler modUserInfoSupportMultiAliasCompleted;
        
        /// <remarks/>
        public event modUserInfo_MultiCompletedEventHandler modUserInfo_MultiCompleted;
        
        /// <remarks/>
        public event deleteDepartmentCompletedEventHandler deleteDepartmentCompleted;
        
        /// <remarks/>
        public event createDisGroupCompletedEventHandler createDisGroupCompleted;
        
        /// <remarks/>
        public event deleteDisGroupUserCompletedEventHandler deleteDisGroupUserCompleted;
        
        /// <remarks/>
        public event createDisGroupUser_NewCompletedEventHandler createDisGroupUser_NewCompleted;
        
        /// <remarks/>
        public event updateDisGroupCompletedEventHandler updateDisGroupCompleted;
        
        /// <remarks/>
        public event deleteDisGroupCompletedEventHandler deleteDisGroupCompleted;
        
        /// <remarks/>
        public event getDisGroupCompletedEventHandler getDisGroupCompleted;
        
        /// <remarks/>
        public event GetDomainUserlistCompletedEventHandler GetDomainUserlistCompleted;
        
        /// <remarks/>
        public event getDomainUserlist_NewCompletedEventHandler getDomainUserlist_NewCompleted;
        
        /// <remarks/>
        public event getDomainUserlistAndAlias_NewCompletedEventHandler getDomainUserlistAndAlias_NewCompleted;
        
        /// <remarks/>
        public event getDomainUserlistByStatusCompletedEventHandler getDomainUserlistByStatusCompleted;
        
        /// <remarks/>
        public event getDomainUserlistGsoapCompletedEventHandler getDomainUserlistGsoapCompleted;
        
        /// <remarks/>
        public event getDomainUserlistLengthGsoapCompletedEventHandler getDomainUserlistLengthGsoapCompleted;
        
        /// <remarks/>
        public event GetSaasDomainUserlistCompletedEventHandler GetSaasDomainUserlistCompleted;
        
        /// <remarks/>
        public event GetUserInfoCompletedEventHandler GetUserInfoCompleted;
        
        /// <remarks/>
        public event getUserInfo_NewCompletedEventHandler getUserInfo_NewCompleted;
        
        /// <remarks/>
        public event getDisGroupUserCompletedEventHandler getDisGroupUserCompleted;
        
        /// <remarks/>
        public event getAllXmaillistCompletedEventHandler getAllXmaillistCompleted;
        
        /// <remarks/>
        public event getXmaillistByNameCompletedEventHandler getXmaillistByNameCompleted;
        
        /// <remarks/>
        public event isXmailUserExistCompletedEventHandler isXmailUserExistCompleted;
        
        /// <remarks/>
        public event regXmailListCompletedEventHandler regXmailListCompleted;
        
        /// <remarks/>
        public event deleteXmailListByNameCompletedEventHandler deleteXmailListByNameCompleted;
        
        /// <remarks/>
        public event updateXmailListByNameCompletedEventHandler updateXmailListByNameCompleted;
        
        /// <remarks/>
        public event modUserStatus_NewCompletedEventHandler modUserStatus_NewCompleted;
        
        /// <remarks/>
        public event modDomainCos_NewCompletedEventHandler modDomainCos_NewCompleted;
        
        /// <remarks/>
        public event getDomainInfo_newCompletedEventHandler getDomainInfo_newCompleted;
        
        /// <remarks/>
        public event modDomainWeChatCompletedEventHandler modDomainWeChatCompleted;
        
        /// <remarks/>
        public event getUserByWechatCompletedEventHandler getUserByWechatCompleted;
        
        /// <remarks/>
        public event saveOrUpdateAppCompletedEventHandler saveOrUpdateAppCompleted;
        
        /// <remarks/>
        public event batdelAppCompletedEventHandler batdelAppCompleted;
        
        /// <remarks/>
        public event getAllAppCompletedEventHandler getAllAppCompleted;
        
        /// <remarks/>
        public event regUserAndGroupTypeCompletedEventHandler regUserAndGroupTypeCompleted;
        
        /// <remarks/>
        public event modUserInfoAndGroupTypeCompletedEventHandler modUserInfoAndGroupTypeCompleted;
        
        /// <remarks/>
        public event regXmailListAndPriviCompletedEventHandler regXmailListAndPriviCompleted;
        
        /// <remarks/>
        public event updateXmailListAndPriviCompletedEventHandler updateXmailListAndPriviCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getVersionReturn")]
        public string getVersion(string domainName) {
            object[] results = this.Invoke("getVersion", new object[] {
                        domainName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getVersionAsync(string domainName) {
            this.getVersionAsync(domainName, null);
        }
        
        /// <remarks/>
        public void getVersionAsync(string domainName, object userState) {
            if ((this.getVersionOperationCompleted == null)) {
                this.getVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVersionOperationCompleted);
            }
            this.InvokeAsync("getVersion", new object[] {
                        domainName}, this.getVersionOperationCompleted, userState);
        }
        
        private void OngetVersionOperationCompleted(object arg) {
            if ((this.getVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVersionCompleted(this, new getVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getManagementDomainReturn")]
        public string getManagementDomain(string jsonData) {
            object[] results = this.Invoke("getManagementDomain", new object[] {
                        jsonData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getManagementDomainAsync(string jsonData) {
            this.getManagementDomainAsync(jsonData, null);
        }
        
        /// <remarks/>
        public void getManagementDomainAsync(string jsonData, object userState) {
            if ((this.getManagementDomainOperationCompleted == null)) {
                this.getManagementDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetManagementDomainOperationCompleted);
            }
            this.InvokeAsync("getManagementDomain", new object[] {
                        jsonData}, this.getManagementDomainOperationCompleted, userState);
        }
        
        private void OngetManagementDomainOperationCompleted(object arg) {
            if ((this.getManagementDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getManagementDomainCompleted(this, new getManagementDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDomainDisGroupUserReturn")]
        public string getDomainDisGroupUser(string domain, string account, string sign) {
            object[] results = this.Invoke("getDomainDisGroupUser", new object[] {
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDomainDisGroupUserAsync(string domain, string account, string sign) {
            this.getDomainDisGroupUserAsync(domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getDomainDisGroupUserAsync(string domain, string account, string sign, object userState) {
            if ((this.getDomainDisGroupUserOperationCompleted == null)) {
                this.getDomainDisGroupUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDomainDisGroupUserOperationCompleted);
            }
            this.InvokeAsync("getDomainDisGroupUser", new object[] {
                        domain,
                        account,
                        sign}, this.getDomainDisGroupUserOperationCompleted, userState);
        }
        
        private void OngetDomainDisGroupUserOperationCompleted(object arg) {
            if ((this.getDomainDisGroupUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDomainDisGroupUserCompleted(this, new getDomainDisGroupUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void deleteXmailuserExpired([System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)] string[] userid, int status, string @operator) {
            this.Invoke("deleteXmailuserExpired", new object[] {
                        userid,
                        status,
                        @operator});
        }
        
        /// <remarks/>
        public void deleteXmailuserExpiredAsync(string[] userid, int status, string @operator) {
            this.deleteXmailuserExpiredAsync(userid, status, @operator, null);
        }
        
        /// <remarks/>
        public void deleteXmailuserExpiredAsync(string[] userid, int status, string @operator, object userState) {
            if ((this.deleteXmailuserExpiredOperationCompleted == null)) {
                this.deleteXmailuserExpiredOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteXmailuserExpiredOperationCompleted);
            }
            this.InvokeAsync("deleteXmailuserExpired", new object[] {
                        userid,
                        status,
                        @operator}, this.deleteXmailuserExpiredOperationCompleted, userState);
        }
        
        private void OndeleteXmailuserExpiredOperationCompleted(object arg) {
            if ((this.deleteXmailuserExpiredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteXmailuserExpiredCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("updateDepartmentReturn")]
        public int updateDepartment(string userid, string domain, int departmentid, string departmentName, int deptId, string description, string listName, string listSync, string mobile, string account, string sign) {
            object[] results = this.Invoke("updateDepartment", new object[] {
                        userid,
                        domain,
                        departmentid,
                        departmentName,
                        deptId,
                        description,
                        listName,
                        listSync,
                        mobile,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateDepartmentAsync(string userid, string domain, int departmentid, string departmentName, int deptId, string description, string listName, string listSync, string mobile, string account, string sign) {
            this.updateDepartmentAsync(userid, domain, departmentid, departmentName, deptId, description, listName, listSync, mobile, account, sign, null);
        }
        
        /// <remarks/>
        public void updateDepartmentAsync(string userid, string domain, int departmentid, string departmentName, int deptId, string description, string listName, string listSync, string mobile, string account, string sign, object userState) {
            if ((this.updateDepartmentOperationCompleted == null)) {
                this.updateDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateDepartmentOperationCompleted);
            }
            this.InvokeAsync("updateDepartment", new object[] {
                        userid,
                        domain,
                        departmentid,
                        departmentName,
                        deptId,
                        description,
                        listName,
                        listSync,
                        mobile,
                        account,
                        sign}, this.updateDepartmentOperationCompleted, userState);
        }
        
        private void OnupdateDepartmentOperationCompleted(object arg) {
            if ((this.updateDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateDepartmentCompleted(this, new updateDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("createDepartmentReturn")]
        public int createDepartment(string userid, string domain, string departmentName, int deptId, string description, string listName, string listSync, string mobile, string account, string sign) {
            object[] results = this.Invoke("createDepartment", new object[] {
                        userid,
                        domain,
                        departmentName,
                        deptId,
                        description,
                        listName,
                        listSync,
                        mobile,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void createDepartmentAsync(string userid, string domain, string departmentName, int deptId, string description, string listName, string listSync, string mobile, string account, string sign) {
            this.createDepartmentAsync(userid, domain, departmentName, deptId, description, listName, listSync, mobile, account, sign, null);
        }
        
        /// <remarks/>
        public void createDepartmentAsync(string userid, string domain, string departmentName, int deptId, string description, string listName, string listSync, string mobile, string account, string sign, object userState) {
            if ((this.createDepartmentOperationCompleted == null)) {
                this.createDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateDepartmentOperationCompleted);
            }
            this.InvokeAsync("createDepartment", new object[] {
                        userid,
                        domain,
                        departmentName,
                        deptId,
                        description,
                        listName,
                        listSync,
                        mobile,
                        account,
                        sign}, this.createDepartmentOperationCompleted, userState);
        }
        
        private void OncreateDepartmentOperationCompleted(object arg) {
            if ((this.createDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createDepartmentCompleted(this, new createDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("createDisGroupUserReturn")]
        public int createDisGroupUser(string userid, string domain, int departmentId, string office, string mobile, string phone, string fax, string account, string sign) {
            object[] results = this.Invoke("createDisGroupUser", new object[] {
                        userid,
                        domain,
                        departmentId,
                        office,
                        mobile,
                        phone,
                        fax,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void createDisGroupUserAsync(string userid, string domain, int departmentId, string office, string mobile, string phone, string fax, string account, string sign) {
            this.createDisGroupUserAsync(userid, domain, departmentId, office, mobile, phone, fax, account, sign, null);
        }
        
        /// <remarks/>
        public void createDisGroupUserAsync(string userid, string domain, int departmentId, string office, string mobile, string phone, string fax, string account, string sign, object userState) {
            if ((this.createDisGroupUserOperationCompleted == null)) {
                this.createDisGroupUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateDisGroupUserOperationCompleted);
            }
            this.InvokeAsync("createDisGroupUser", new object[] {
                        userid,
                        domain,
                        departmentId,
                        office,
                        mobile,
                        phone,
                        fax,
                        account,
                        sign}, this.createDisGroupUserOperationCompleted, userState);
        }
        
        private void OncreateDisGroupUserOperationCompleted(object arg) {
            if ((this.createDisGroupUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createDisGroupUserCompleted(this, new createDisGroupUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDepartmentReturn")]
        public string getDepartment(string userid, string domain, string account, string sign) {
            object[] results = this.Invoke("getDepartment", new object[] {
                        userid,
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDepartmentAsync(string userid, string domain, string account, string sign) {
            this.getDepartmentAsync(userid, domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getDepartmentAsync(string userid, string domain, string account, string sign, object userState) {
            if ((this.getDepartmentOperationCompleted == null)) {
                this.getDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDepartmentOperationCompleted);
            }
            this.InvokeAsync("getDepartment", new object[] {
                        userid,
                        domain,
                        account,
                        sign}, this.getDepartmentOperationCompleted, userState);
        }
        
        private void OngetDepartmentOperationCompleted(object arg) {
            if ((this.getDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDepartmentCompleted(this, new getDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("RegUserReturn")]
        public int RegUser(string userid, string domain, string passwd, int crypttype, int gid, int departmentid, string username, string offic, string mobile, string phone, string fax) {
            object[] results = this.Invoke("RegUser", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        gid,
                        departmentid,
                        username,
                        offic,
                        mobile,
                        phone,
                        fax});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RegUserAsync(string userid, string domain, string passwd, int crypttype, int gid, int departmentid, string username, string offic, string mobile, string phone, string fax) {
            this.RegUserAsync(userid, domain, passwd, crypttype, gid, departmentid, username, offic, mobile, phone, fax, null);
        }
        
        /// <remarks/>
        public void RegUserAsync(string userid, string domain, string passwd, int crypttype, int gid, int departmentid, string username, string offic, string mobile, string phone, string fax, object userState) {
            if ((this.RegUserOperationCompleted == null)) {
                this.RegUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegUserOperationCompleted);
            }
            this.InvokeAsync("RegUser", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        gid,
                        departmentid,
                        username,
                        offic,
                        mobile,
                        phone,
                        fax}, this.RegUserOperationCompleted, userState);
        }
        
        private void OnRegUserOperationCompleted(object arg) {
            if ((this.RegUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegUserCompleted(this, new RegUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("regUser_NewReturn")]
        public int regUser_New(
                    string userid, 
                    string domain, 
                    string passwd, 
                    int crypttype, 
                    int gid, 
                    int departmentid, 
                    string username, 
                    string offic, 
                    string mobile, 
                    string phone, 
                    string fax, 
                    string alias, 
                    string alias2, 
                    int roleId, 
                    int changepwd, 
                    string account, 
                    string sign) {
            object[] results = this.Invoke("regUser_New", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        gid,
                        departmentid,
                        username,
                        offic,
                        mobile,
                        phone,
                        fax,
                        alias,
                        alias2,
                        roleId,
                        changepwd,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void regUser_NewAsync(
                    string userid, 
                    string domain, 
                    string passwd, 
                    int crypttype, 
                    int gid, 
                    int departmentid, 
                    string username, 
                    string offic, 
                    string mobile, 
                    string phone, 
                    string fax, 
                    string alias, 
                    string alias2, 
                    int roleId, 
                    int changepwd, 
                    string account, 
                    string sign) {
            this.regUser_NewAsync(userid, domain, passwd, crypttype, gid, departmentid, username, offic, mobile, phone, fax, alias, alias2, roleId, changepwd, account, sign, null);
        }
        
        /// <remarks/>
        public void regUser_NewAsync(
                    string userid, 
                    string domain, 
                    string passwd, 
                    int crypttype, 
                    int gid, 
                    int departmentid, 
                    string username, 
                    string offic, 
                    string mobile, 
                    string phone, 
                    string fax, 
                    string alias, 
                    string alias2, 
                    int roleId, 
                    int changepwd, 
                    string account, 
                    string sign, 
                    object userState) {
            if ((this.regUser_NewOperationCompleted == null)) {
                this.regUser_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregUser_NewOperationCompleted);
            }
            this.InvokeAsync("regUser_New", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        gid,
                        departmentid,
                        username,
                        offic,
                        mobile,
                        phone,
                        fax,
                        alias,
                        alias2,
                        roleId,
                        changepwd,
                        account,
                        sign}, this.regUser_NewOperationCompleted, userState);
        }
        
        private void OnregUser_NewOperationCompleted(object arg) {
            if ((this.regUser_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.regUser_NewCompleted(this, new regUser_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("regUser_MultiReturn")]
        public int regUser_Multi(
                    string userid, 
                    string domain, 
                    string passwd, 
                    int crypttype, 
                    int gid, 
                    string departmentid, 
                    string username, 
                    string offic, 
                    string mobile, 
                    string phone, 
                    string fax, 
                    string alias, 
                    string alias2, 
                    int roleId, 
                    int changepwd, 
                    string account, 
                    string sign) {
            object[] results = this.Invoke("regUser_Multi", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        gid,
                        departmentid,
                        username,
                        offic,
                        mobile,
                        phone,
                        fax,
                        alias,
                        alias2,
                        roleId,
                        changepwd,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void regUser_MultiAsync(
                    string userid, 
                    string domain, 
                    string passwd, 
                    int crypttype, 
                    int gid, 
                    string departmentid, 
                    string username, 
                    string offic, 
                    string mobile, 
                    string phone, 
                    string fax, 
                    string alias, 
                    string alias2, 
                    int roleId, 
                    int changepwd, 
                    string account, 
                    string sign) {
            this.regUser_MultiAsync(userid, domain, passwd, crypttype, gid, departmentid, username, offic, mobile, phone, fax, alias, alias2, roleId, changepwd, account, sign, null);
        }
        
        /// <remarks/>
        public void regUser_MultiAsync(
                    string userid, 
                    string domain, 
                    string passwd, 
                    int crypttype, 
                    int gid, 
                    string departmentid, 
                    string username, 
                    string offic, 
                    string mobile, 
                    string phone, 
                    string fax, 
                    string alias, 
                    string alias2, 
                    int roleId, 
                    int changepwd, 
                    string account, 
                    string sign, 
                    object userState) {
            if ((this.regUser_MultiOperationCompleted == null)) {
                this.regUser_MultiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregUser_MultiOperationCompleted);
            }
            this.InvokeAsync("regUser_Multi", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        gid,
                        departmentid,
                        username,
                        offic,
                        mobile,
                        phone,
                        fax,
                        alias,
                        alias2,
                        roleId,
                        changepwd,
                        account,
                        sign}, this.regUser_MultiOperationCompleted, userState);
        }
        
        private void OnregUser_MultiOperationCompleted(object arg) {
            if ((this.regUser_MultiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.regUser_MultiCompleted(this, new regUser_MultiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("DelUserReturn")]
        public int DelUser(string userid, string domain) {
            object[] results = this.Invoke("DelUser", new object[] {
                        userid,
                        domain});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DelUserAsync(string userid, string domain) {
            this.DelUserAsync(userid, domain, null);
        }
        
        /// <remarks/>
        public void DelUserAsync(string userid, string domain, object userState) {
            if ((this.DelUserOperationCompleted == null)) {
                this.DelUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelUserOperationCompleted);
            }
            this.InvokeAsync("DelUser", new object[] {
                        userid,
                        domain}, this.DelUserOperationCompleted, userState);
        }
        
        private void OnDelUserOperationCompleted(object arg) {
            if ((this.DelUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelUserCompleted(this, new DelUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("delUser_NewReturn")]
        public int delUser_New(string userid, string domain, string account, string sign) {
            object[] results = this.Invoke("delUser_New", new object[] {
                        userid,
                        domain,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delUser_NewAsync(string userid, string domain, string account, string sign) {
            this.delUser_NewAsync(userid, domain, account, sign, null);
        }
        
        /// <remarks/>
        public void delUser_NewAsync(string userid, string domain, string account, string sign, object userState) {
            if ((this.delUser_NewOperationCompleted == null)) {
                this.delUser_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelUser_NewOperationCompleted);
            }
            this.InvokeAsync("delUser_New", new object[] {
                        userid,
                        domain,
                        account,
                        sign}, this.delUser_NewOperationCompleted, userState);
        }
        
        private void OndelUser_NewOperationCompleted(object arg) {
            if ((this.delUser_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delUser_NewCompleted(this, new delUser_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("ModPasswdReturn")]
        public int ModPasswd(string userid, string domain, string passwd, int crypttype) {
            object[] results = this.Invoke("ModPasswd", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ModPasswdAsync(string userid, string domain, string passwd, int crypttype) {
            this.ModPasswdAsync(userid, domain, passwd, crypttype, null);
        }
        
        /// <remarks/>
        public void ModPasswdAsync(string userid, string domain, string passwd, int crypttype, object userState) {
            if ((this.ModPasswdOperationCompleted == null)) {
                this.ModPasswdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModPasswdOperationCompleted);
            }
            this.InvokeAsync("ModPasswd", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype}, this.ModPasswdOperationCompleted, userState);
        }
        
        private void OnModPasswdOperationCompleted(object arg) {
            if ((this.ModPasswdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModPasswdCompleted(this, new ModPasswdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("modPasswd_NewReturn")]
        public int modPasswd_New(string userid, string domain, string passwd, int crypttype, string account, string sign) {
            object[] results = this.Invoke("modPasswd_New", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void modPasswd_NewAsync(string userid, string domain, string passwd, int crypttype, string account, string sign) {
            this.modPasswd_NewAsync(userid, domain, passwd, crypttype, account, sign, null);
        }
        
        /// <remarks/>
        public void modPasswd_NewAsync(string userid, string domain, string passwd, int crypttype, string account, string sign, object userState) {
            if ((this.modPasswd_NewOperationCompleted == null)) {
                this.modPasswd_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodPasswd_NewOperationCompleted);
            }
            this.InvokeAsync("modPasswd_New", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        account,
                        sign}, this.modPasswd_NewOperationCompleted, userState);
        }
        
        private void OnmodPasswd_NewOperationCompleted(object arg) {
            if ((this.modPasswd_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.modPasswd_NewCompleted(this, new modPasswd_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetDirInfoReturn")]
        public string GetDirInfo(string userid, string domain, string passwd, int crypttype) {
            object[] results = this.Invoke("GetDirInfo", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDirInfoAsync(string userid, string domain, string passwd, int crypttype) {
            this.GetDirInfoAsync(userid, domain, passwd, crypttype, null);
        }
        
        /// <remarks/>
        public void GetDirInfoAsync(string userid, string domain, string passwd, int crypttype, object userState) {
            if ((this.GetDirInfoOperationCompleted == null)) {
                this.GetDirInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDirInfoOperationCompleted);
            }
            this.InvokeAsync("GetDirInfo", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype}, this.GetDirInfoOperationCompleted, userState);
        }
        
        private void OnGetDirInfoOperationCompleted(object arg) {
            if ((this.GetDirInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDirInfoCompleted(this, new GetDirInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDirInfo_NewReturn")]
        public string getDirInfo_New(string userid, string domain, string passwd, int crypttype, string account, string sign) {
            object[] results = this.Invoke("getDirInfo_New", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDirInfo_NewAsync(string userid, string domain, string passwd, int crypttype, string account, string sign) {
            this.getDirInfo_NewAsync(userid, domain, passwd, crypttype, account, sign, null);
        }
        
        /// <remarks/>
        public void getDirInfo_NewAsync(string userid, string domain, string passwd, int crypttype, string account, string sign, object userState) {
            if ((this.getDirInfo_NewOperationCompleted == null)) {
                this.getDirInfo_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDirInfo_NewOperationCompleted);
            }
            this.InvokeAsync("getDirInfo_New", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        account,
                        sign}, this.getDirInfo_NewOperationCompleted, userState);
        }
        
        private void OngetDirInfo_NewOperationCompleted(object arg) {
            if ((this.getDirInfo_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDirInfo_NewCompleted(this, new getDirInfo_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("AspGetDomainUserlistReturn")]
        public string AspGetDomainUserlist(string domain) {
            object[] results = this.Invoke("AspGetDomainUserlist", new object[] {
                        domain});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AspGetDomainUserlistAsync(string domain) {
            this.AspGetDomainUserlistAsync(domain, null);
        }
        
        /// <remarks/>
        public void AspGetDomainUserlistAsync(string domain, object userState) {
            if ((this.AspGetDomainUserlistOperationCompleted == null)) {
                this.AspGetDomainUserlistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAspGetDomainUserlistOperationCompleted);
            }
            this.InvokeAsync("AspGetDomainUserlist", new object[] {
                        domain}, this.AspGetDomainUserlistOperationCompleted, userState);
        }
        
        private void OnAspGetDomainUserlistOperationCompleted(object arg) {
            if ((this.AspGetDomainUserlistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AspGetDomainUserlistCompleted(this, new AspGetDomainUserlistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("ModGidReturn")]
        public int ModGid(string userid, string domain, int gid) {
            object[] results = this.Invoke("ModGid", new object[] {
                        userid,
                        domain,
                        gid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ModGidAsync(string userid, string domain, int gid) {
            this.ModGidAsync(userid, domain, gid, null);
        }
        
        /// <remarks/>
        public void ModGidAsync(string userid, string domain, int gid, object userState) {
            if ((this.ModGidOperationCompleted == null)) {
                this.ModGidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModGidOperationCompleted);
            }
            this.InvokeAsync("ModGid", new object[] {
                        userid,
                        domain,
                        gid}, this.ModGidOperationCompleted, userState);
        }
        
        private void OnModGidOperationCompleted(object arg) {
            if ((this.ModGidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModGidCompleted(this, new ModGidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("modGid_NewReturn")]
        public int modGid_New(string userid, string domain, int gid, string account, string sign) {
            object[] results = this.Invoke("modGid_New", new object[] {
                        userid,
                        domain,
                        gid,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void modGid_NewAsync(string userid, string domain, int gid, string account, string sign) {
            this.modGid_NewAsync(userid, domain, gid, account, sign, null);
        }
        
        /// <remarks/>
        public void modGid_NewAsync(string userid, string domain, int gid, string account, string sign, object userState) {
            if ((this.modGid_NewOperationCompleted == null)) {
                this.modGid_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodGid_NewOperationCompleted);
            }
            this.InvokeAsync("modGid_New", new object[] {
                        userid,
                        domain,
                        gid,
                        account,
                        sign}, this.modGid_NewOperationCompleted, userState);
        }
        
        private void OnmodGid_NewOperationCompleted(object arg) {
            if ((this.modGid_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.modGid_NewCompleted(this, new modGid_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("AuthenticationReturn")]
        public int Authentication(string userid, string domain, string passwd) {
            object[] results = this.Invoke("Authentication", new object[] {
                        userid,
                        domain,
                        passwd});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticationAsync(string userid, string domain, string passwd) {
            this.AuthenticationAsync(userid, domain, passwd, null);
        }
        
        /// <remarks/>
        public void AuthenticationAsync(string userid, string domain, string passwd, object userState) {
            if ((this.AuthenticationOperationCompleted == null)) {
                this.AuthenticationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticationOperationCompleted);
            }
            this.InvokeAsync("Authentication", new object[] {
                        userid,
                        domain,
                        passwd}, this.AuthenticationOperationCompleted, userState);
        }
        
        private void OnAuthenticationOperationCompleted(object arg) {
            if ((this.AuthenticationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticationCompleted(this, new AuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("authentication_NewReturn")]
        public int authentication_New(string userid, string domain, string passwd, int crypttype, string account, string sign) {
            object[] results = this.Invoke("authentication_New", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void authentication_NewAsync(string userid, string domain, string passwd, int crypttype, string account, string sign) {
            this.authentication_NewAsync(userid, domain, passwd, crypttype, account, sign, null);
        }
        
        /// <remarks/>
        public void authentication_NewAsync(string userid, string domain, string passwd, int crypttype, string account, string sign, object userState) {
            if ((this.authentication_NewOperationCompleted == null)) {
                this.authentication_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.Onauthentication_NewOperationCompleted);
            }
            this.InvokeAsync("authentication_New", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        account,
                        sign}, this.authentication_NewOperationCompleted, userState);
        }
        
        private void Onauthentication_NewOperationCompleted(object arg) {
            if ((this.authentication_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.authentication_NewCompleted(this, new authentication_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("authenticationManager_NewReturn")]
        public int authenticationManager_New(string userid, string domain, string passwd, int crypttype, string account, string sign) {
            object[] results = this.Invoke("authenticationManager_New", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void authenticationManager_NewAsync(string userid, string domain, string passwd, int crypttype, string account, string sign) {
            this.authenticationManager_NewAsync(userid, domain, passwd, crypttype, account, sign, null);
        }
        
        /// <remarks/>
        public void authenticationManager_NewAsync(string userid, string domain, string passwd, int crypttype, string account, string sign, object userState) {
            if ((this.authenticationManager_NewOperationCompleted == null)) {
                this.authenticationManager_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnauthenticationManager_NewOperationCompleted);
            }
            this.InvokeAsync("authenticationManager_New", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        account,
                        sign}, this.authenticationManager_NewOperationCompleted, userState);
        }
        
        private void OnauthenticationManager_NewOperationCompleted(object arg) {
            if ((this.authenticationManager_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.authenticationManager_NewCompleted(this, new authenticationManager_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("ModStatusReturn")]
        public int ModStatus(string userid, string domain, int status) {
            object[] results = this.Invoke("ModStatus", new object[] {
                        userid,
                        domain,
                        status});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ModStatusAsync(string userid, string domain, int status) {
            this.ModStatusAsync(userid, domain, status, null);
        }
        
        /// <remarks/>
        public void ModStatusAsync(string userid, string domain, int status, object userState) {
            if ((this.ModStatusOperationCompleted == null)) {
                this.ModStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModStatusOperationCompleted);
            }
            this.InvokeAsync("ModStatus", new object[] {
                        userid,
                        domain,
                        status}, this.ModStatusOperationCompleted, userState);
        }
        
        private void OnModStatusOperationCompleted(object arg) {
            if ((this.ModStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModStatusCompleted(this, new ModStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("modStatus_NewReturn")]
        public int modStatus_New(string userid, string domain, int status, string account, string sign) {
            object[] results = this.Invoke("modStatus_New", new object[] {
                        userid,
                        domain,
                        status,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void modStatus_NewAsync(string userid, string domain, int status, string account, string sign) {
            this.modStatus_NewAsync(userid, domain, status, account, sign, null);
        }
        
        /// <remarks/>
        public void modStatus_NewAsync(string userid, string domain, int status, string account, string sign, object userState) {
            if ((this.modStatus_NewOperationCompleted == null)) {
                this.modStatus_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodStatus_NewOperationCompleted);
            }
            this.InvokeAsync("modStatus_New", new object[] {
                        userid,
                        domain,
                        status,
                        account,
                        sign}, this.modStatus_NewOperationCompleted, userState);
        }
        
        private void OnmodStatus_NewOperationCompleted(object arg) {
            if ((this.modStatus_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.modStatus_NewCompleted(this, new modStatus_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("ModUserInfoReturn")]
        public int ModUserInfo(string userid, string domain, int departmentid, string username, string office, string mobile, string phone, string fax) {
            object[] results = this.Invoke("ModUserInfo", new object[] {
                        userid,
                        domain,
                        departmentid,
                        username,
                        office,
                        mobile,
                        phone,
                        fax});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ModUserInfoAsync(string userid, string domain, int departmentid, string username, string office, string mobile, string phone, string fax) {
            this.ModUserInfoAsync(userid, domain, departmentid, username, office, mobile, phone, fax, null);
        }
        
        /// <remarks/>
        public void ModUserInfoAsync(string userid, string domain, int departmentid, string username, string office, string mobile, string phone, string fax, object userState) {
            if ((this.ModUserInfoOperationCompleted == null)) {
                this.ModUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModUserInfoOperationCompleted);
            }
            this.InvokeAsync("ModUserInfo", new object[] {
                        userid,
                        domain,
                        departmentid,
                        username,
                        office,
                        mobile,
                        phone,
                        fax}, this.ModUserInfoOperationCompleted, userState);
        }
        
        private void OnModUserInfoOperationCompleted(object arg) {
            if ((this.ModUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModUserInfoCompleted(this, new ModUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("modUserInfo_NewReturn")]
        public int modUserInfo_New(string userid, string domain, int departmentid, string username, string office, string mobile, string phone, string fax, string alias, string alias2, string account, string sign) {
            object[] results = this.Invoke("modUserInfo_New", new object[] {
                        userid,
                        domain,
                        departmentid,
                        username,
                        office,
                        mobile,
                        phone,
                        fax,
                        alias,
                        alias2,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void modUserInfo_NewAsync(string userid, string domain, int departmentid, string username, string office, string mobile, string phone, string fax, string alias, string alias2, string account, string sign) {
            this.modUserInfo_NewAsync(userid, domain, departmentid, username, office, mobile, phone, fax, alias, alias2, account, sign, null);
        }
        
        /// <remarks/>
        public void modUserInfo_NewAsync(string userid, string domain, int departmentid, string username, string office, string mobile, string phone, string fax, string alias, string alias2, string account, string sign, object userState) {
            if ((this.modUserInfo_NewOperationCompleted == null)) {
                this.modUserInfo_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodUserInfo_NewOperationCompleted);
            }
            this.InvokeAsync("modUserInfo_New", new object[] {
                        userid,
                        domain,
                        departmentid,
                        username,
                        office,
                        mobile,
                        phone,
                        fax,
                        alias,
                        alias2,
                        account,
                        sign}, this.modUserInfo_NewOperationCompleted, userState);
        }
        
        private void OnmodUserInfo_NewOperationCompleted(object arg) {
            if ((this.modUserInfo_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.modUserInfo_NewCompleted(this, new modUserInfo_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("modUserInfoSupportMultiAliasReturn")]
        public int modUserInfoSupportMultiAlias(string userid, string domain, int departmentid, string username, string office, string mobile, string phone, string fax, string alias, string thisParamNotUse, string account, string sign, int opAliasType) {
            object[] results = this.Invoke("modUserInfoSupportMultiAlias", new object[] {
                        userid,
                        domain,
                        departmentid,
                        username,
                        office,
                        mobile,
                        phone,
                        fax,
                        alias,
                        thisParamNotUse,
                        account,
                        sign,
                        opAliasType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void modUserInfoSupportMultiAliasAsync(string userid, string domain, int departmentid, string username, string office, string mobile, string phone, string fax, string alias, string thisParamNotUse, string account, string sign, int opAliasType) {
            this.modUserInfoSupportMultiAliasAsync(userid, domain, departmentid, username, office, mobile, phone, fax, alias, thisParamNotUse, account, sign, opAliasType, null);
        }
        
        /// <remarks/>
        public void modUserInfoSupportMultiAliasAsync(string userid, string domain, int departmentid, string username, string office, string mobile, string phone, string fax, string alias, string thisParamNotUse, string account, string sign, int opAliasType, object userState) {
            if ((this.modUserInfoSupportMultiAliasOperationCompleted == null)) {
                this.modUserInfoSupportMultiAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodUserInfoSupportMultiAliasOperationCompleted);
            }
            this.InvokeAsync("modUserInfoSupportMultiAlias", new object[] {
                        userid,
                        domain,
                        departmentid,
                        username,
                        office,
                        mobile,
                        phone,
                        fax,
                        alias,
                        thisParamNotUse,
                        account,
                        sign,
                        opAliasType}, this.modUserInfoSupportMultiAliasOperationCompleted, userState);
        }
        
        private void OnmodUserInfoSupportMultiAliasOperationCompleted(object arg) {
            if ((this.modUserInfoSupportMultiAliasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.modUserInfoSupportMultiAliasCompleted(this, new modUserInfoSupportMultiAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("modUserInfo_MultiReturn")]
        public int modUserInfo_Multi(string userid, string domain, string departmentid, string username, string office, string mobile, string phone, string fax, string alias, string alias2, string account, string sign) {
            object[] results = this.Invoke("modUserInfo_Multi", new object[] {
                        userid,
                        domain,
                        departmentid,
                        username,
                        office,
                        mobile,
                        phone,
                        fax,
                        alias,
                        alias2,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void modUserInfo_MultiAsync(string userid, string domain, string departmentid, string username, string office, string mobile, string phone, string fax, string alias, string alias2, string account, string sign) {
            this.modUserInfo_MultiAsync(userid, domain, departmentid, username, office, mobile, phone, fax, alias, alias2, account, sign, null);
        }
        
        /// <remarks/>
        public void modUserInfo_MultiAsync(string userid, string domain, string departmentid, string username, string office, string mobile, string phone, string fax, string alias, string alias2, string account, string sign, object userState) {
            if ((this.modUserInfo_MultiOperationCompleted == null)) {
                this.modUserInfo_MultiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodUserInfo_MultiOperationCompleted);
            }
            this.InvokeAsync("modUserInfo_Multi", new object[] {
                        userid,
                        domain,
                        departmentid,
                        username,
                        office,
                        mobile,
                        phone,
                        fax,
                        alias,
                        alias2,
                        account,
                        sign}, this.modUserInfo_MultiOperationCompleted, userState);
        }
        
        private void OnmodUserInfo_MultiOperationCompleted(object arg) {
            if ((this.modUserInfo_MultiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.modUserInfo_MultiCompleted(this, new modUserInfo_MultiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("deleteDepartmentReturn")]
        public int deleteDepartment(string domain, string departmentId, string account, string sign) {
            object[] results = this.Invoke("deleteDepartment", new object[] {
                        domain,
                        departmentId,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteDepartmentAsync(string domain, string departmentId, string account, string sign) {
            this.deleteDepartmentAsync(domain, departmentId, account, sign, null);
        }
        
        /// <remarks/>
        public void deleteDepartmentAsync(string domain, string departmentId, string account, string sign, object userState) {
            if ((this.deleteDepartmentOperationCompleted == null)) {
                this.deleteDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteDepartmentOperationCompleted);
            }
            this.InvokeAsync("deleteDepartment", new object[] {
                        domain,
                        departmentId,
                        account,
                        sign}, this.deleteDepartmentOperationCompleted, userState);
        }
        
        private void OndeleteDepartmentOperationCompleted(object arg) {
            if ((this.deleteDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteDepartmentCompleted(this, new deleteDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("createDisGroupReturn")]
        public int createDisGroup(string userid, string domain, string disGroupName, string description, int parent, string account, string sign) {
            object[] results = this.Invoke("createDisGroup", new object[] {
                        userid,
                        domain,
                        disGroupName,
                        description,
                        parent,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void createDisGroupAsync(string userid, string domain, string disGroupName, string description, int parent, string account, string sign) {
            this.createDisGroupAsync(userid, domain, disGroupName, description, parent, account, sign, null);
        }
        
        /// <remarks/>
        public void createDisGroupAsync(string userid, string domain, string disGroupName, string description, int parent, string account, string sign, object userState) {
            if ((this.createDisGroupOperationCompleted == null)) {
                this.createDisGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateDisGroupOperationCompleted);
            }
            this.InvokeAsync("createDisGroup", new object[] {
                        userid,
                        domain,
                        disGroupName,
                        description,
                        parent,
                        account,
                        sign}, this.createDisGroupOperationCompleted, userState);
        }
        
        private void OncreateDisGroupOperationCompleted(object arg) {
            if ((this.createDisGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createDisGroupCompleted(this, new createDisGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("deleteDisGroupUserReturn")]
        public int deleteDisGroupUser(int deptId, string userid, string domain, string account, string sign) {
            object[] results = this.Invoke("deleteDisGroupUser", new object[] {
                        deptId,
                        userid,
                        domain,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteDisGroupUserAsync(int deptId, string userid, string domain, string account, string sign) {
            this.deleteDisGroupUserAsync(deptId, userid, domain, account, sign, null);
        }
        
        /// <remarks/>
        public void deleteDisGroupUserAsync(int deptId, string userid, string domain, string account, string sign, object userState) {
            if ((this.deleteDisGroupUserOperationCompleted == null)) {
                this.deleteDisGroupUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteDisGroupUserOperationCompleted);
            }
            this.InvokeAsync("deleteDisGroupUser", new object[] {
                        deptId,
                        userid,
                        domain,
                        account,
                        sign}, this.deleteDisGroupUserOperationCompleted, userState);
        }
        
        private void OndeleteDisGroupUserOperationCompleted(object arg) {
            if ((this.deleteDisGroupUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteDisGroupUserCompleted(this, new deleteDisGroupUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("createDisGroupUser_NewReturn")]
        public int createDisGroupUser_New(string userid, string domain, int departmentId, string username, string office, string mobile, string phone, string fax, string account, string sign) {
            object[] results = this.Invoke("createDisGroupUser_New", new object[] {
                        userid,
                        domain,
                        departmentId,
                        username,
                        office,
                        mobile,
                        phone,
                        fax,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void createDisGroupUser_NewAsync(string userid, string domain, int departmentId, string username, string office, string mobile, string phone, string fax, string account, string sign) {
            this.createDisGroupUser_NewAsync(userid, domain, departmentId, username, office, mobile, phone, fax, account, sign, null);
        }
        
        /// <remarks/>
        public void createDisGroupUser_NewAsync(string userid, string domain, int departmentId, string username, string office, string mobile, string phone, string fax, string account, string sign, object userState) {
            if ((this.createDisGroupUser_NewOperationCompleted == null)) {
                this.createDisGroupUser_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateDisGroupUser_NewOperationCompleted);
            }
            this.InvokeAsync("createDisGroupUser_New", new object[] {
                        userid,
                        domain,
                        departmentId,
                        username,
                        office,
                        mobile,
                        phone,
                        fax,
                        account,
                        sign}, this.createDisGroupUser_NewOperationCompleted, userState);
        }
        
        private void OncreateDisGroupUser_NewOperationCompleted(object arg) {
            if ((this.createDisGroupUser_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createDisGroupUser_NewCompleted(this, new createDisGroupUser_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("updateDisGroupReturn")]
        public int updateDisGroup(string userid, string domain, int disGroupId, string disGroupName, string description, int parent, string account, string sign) {
            object[] results = this.Invoke("updateDisGroup", new object[] {
                        userid,
                        domain,
                        disGroupId,
                        disGroupName,
                        description,
                        parent,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateDisGroupAsync(string userid, string domain, int disGroupId, string disGroupName, string description, int parent, string account, string sign) {
            this.updateDisGroupAsync(userid, domain, disGroupId, disGroupName, description, parent, account, sign, null);
        }
        
        /// <remarks/>
        public void updateDisGroupAsync(string userid, string domain, int disGroupId, string disGroupName, string description, int parent, string account, string sign, object userState) {
            if ((this.updateDisGroupOperationCompleted == null)) {
                this.updateDisGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateDisGroupOperationCompleted);
            }
            this.InvokeAsync("updateDisGroup", new object[] {
                        userid,
                        domain,
                        disGroupId,
                        disGroupName,
                        description,
                        parent,
                        account,
                        sign}, this.updateDisGroupOperationCompleted, userState);
        }
        
        private void OnupdateDisGroupOperationCompleted(object arg) {
            if ((this.updateDisGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateDisGroupCompleted(this, new updateDisGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("deleteDisGroupReturn")]
        public int deleteDisGroup(string userid, string domain, int departmentId, string account, string sign) {
            object[] results = this.Invoke("deleteDisGroup", new object[] {
                        userid,
                        domain,
                        departmentId,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteDisGroupAsync(string userid, string domain, int departmentId, string account, string sign) {
            this.deleteDisGroupAsync(userid, domain, departmentId, account, sign, null);
        }
        
        /// <remarks/>
        public void deleteDisGroupAsync(string userid, string domain, int departmentId, string account, string sign, object userState) {
            if ((this.deleteDisGroupOperationCompleted == null)) {
                this.deleteDisGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteDisGroupOperationCompleted);
            }
            this.InvokeAsync("deleteDisGroup", new object[] {
                        userid,
                        domain,
                        departmentId,
                        account,
                        sign}, this.deleteDisGroupOperationCompleted, userState);
        }
        
        private void OndeleteDisGroupOperationCompleted(object arg) {
            if ((this.deleteDisGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteDisGroupCompleted(this, new deleteDisGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDisGroupReturn")]
        public string getDisGroup(string userid, string domain, string account, string sign) {
            object[] results = this.Invoke("getDisGroup", new object[] {
                        userid,
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDisGroupAsync(string userid, string domain, string account, string sign) {
            this.getDisGroupAsync(userid, domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getDisGroupAsync(string userid, string domain, string account, string sign, object userState) {
            if ((this.getDisGroupOperationCompleted == null)) {
                this.getDisGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDisGroupOperationCompleted);
            }
            this.InvokeAsync("getDisGroup", new object[] {
                        userid,
                        domain,
                        account,
                        sign}, this.getDisGroupOperationCompleted, userState);
        }
        
        private void OngetDisGroupOperationCompleted(object arg) {
            if ((this.getDisGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDisGroupCompleted(this, new getDisGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetDomainUserlistReturn")]
        public string GetDomainUserlist(string domain) {
            object[] results = this.Invoke("GetDomainUserlist", new object[] {
                        domain});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainUserlistAsync(string domain) {
            this.GetDomainUserlistAsync(domain, null);
        }
        
        /// <remarks/>
        public void GetDomainUserlistAsync(string domain, object userState) {
            if ((this.GetDomainUserlistOperationCompleted == null)) {
                this.GetDomainUserlistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainUserlistOperationCompleted);
            }
            this.InvokeAsync("GetDomainUserlist", new object[] {
                        domain}, this.GetDomainUserlistOperationCompleted, userState);
        }
        
        private void OnGetDomainUserlistOperationCompleted(object arg) {
            if ((this.GetDomainUserlistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainUserlistCompleted(this, new GetDomainUserlistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDomainUserlist_NewReturn")]
        public string getDomainUserlist_New(string domain, string account, string sign) {
            object[] results = this.Invoke("getDomainUserlist_New", new object[] {
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDomainUserlist_NewAsync(string domain, string account, string sign) {
            this.getDomainUserlist_NewAsync(domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getDomainUserlist_NewAsync(string domain, string account, string sign, object userState) {
            if ((this.getDomainUserlist_NewOperationCompleted == null)) {
                this.getDomainUserlist_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDomainUserlist_NewOperationCompleted);
            }
            this.InvokeAsync("getDomainUserlist_New", new object[] {
                        domain,
                        account,
                        sign}, this.getDomainUserlist_NewOperationCompleted, userState);
        }
        
        private void OngetDomainUserlist_NewOperationCompleted(object arg) {
            if ((this.getDomainUserlist_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDomainUserlist_NewCompleted(this, new getDomainUserlist_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDomainUserlistAndAlias_NewReturn")]
        public string getDomainUserlistAndAlias_New(string domain, string account, string sign) {
            object[] results = this.Invoke("getDomainUserlistAndAlias_New", new object[] {
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDomainUserlistAndAlias_NewAsync(string domain, string account, string sign) {
            this.getDomainUserlistAndAlias_NewAsync(domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getDomainUserlistAndAlias_NewAsync(string domain, string account, string sign, object userState) {
            if ((this.getDomainUserlistAndAlias_NewOperationCompleted == null)) {
                this.getDomainUserlistAndAlias_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDomainUserlistAndAlias_NewOperationCompleted);
            }
            this.InvokeAsync("getDomainUserlistAndAlias_New", new object[] {
                        domain,
                        account,
                        sign}, this.getDomainUserlistAndAlias_NewOperationCompleted, userState);
        }
        
        private void OngetDomainUserlistAndAlias_NewOperationCompleted(object arg) {
            if ((this.getDomainUserlistAndAlias_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDomainUserlistAndAlias_NewCompleted(this, new getDomainUserlistAndAlias_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDomainUserlistByStatusReturn")]
        public string getDomainUserlistByStatus(string domain, int emailStatus, int emStatus, string account, string sign) {
            object[] results = this.Invoke("getDomainUserlistByStatus", new object[] {
                        domain,
                        emailStatus,
                        emStatus,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDomainUserlistByStatusAsync(string domain, int emailStatus, int emStatus, string account, string sign) {
            this.getDomainUserlistByStatusAsync(domain, emailStatus, emStatus, account, sign, null);
        }
        
        /// <remarks/>
        public void getDomainUserlistByStatusAsync(string domain, int emailStatus, int emStatus, string account, string sign, object userState) {
            if ((this.getDomainUserlistByStatusOperationCompleted == null)) {
                this.getDomainUserlistByStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDomainUserlistByStatusOperationCompleted);
            }
            this.InvokeAsync("getDomainUserlistByStatus", new object[] {
                        domain,
                        emailStatus,
                        emStatus,
                        account,
                        sign}, this.getDomainUserlistByStatusOperationCompleted, userState);
        }
        
        private void OngetDomainUserlistByStatusOperationCompleted(object arg) {
            if ((this.getDomainUserlistByStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDomainUserlistByStatusCompleted(this, new getDomainUserlistByStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDomainUserlistGsoapReturn", DataType="base64Binary")]
        public byte[] getDomainUserlistGsoap(string domain, string account, string sign) {
            object[] results = this.Invoke("getDomainUserlistGsoap", new object[] {
                        domain,
                        account,
                        sign});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getDomainUserlistGsoapAsync(string domain, string account, string sign) {
            this.getDomainUserlistGsoapAsync(domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getDomainUserlistGsoapAsync(string domain, string account, string sign, object userState) {
            if ((this.getDomainUserlistGsoapOperationCompleted == null)) {
                this.getDomainUserlistGsoapOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDomainUserlistGsoapOperationCompleted);
            }
            this.InvokeAsync("getDomainUserlistGsoap", new object[] {
                        domain,
                        account,
                        sign}, this.getDomainUserlistGsoapOperationCompleted, userState);
        }
        
        private void OngetDomainUserlistGsoapOperationCompleted(object arg) {
            if ((this.getDomainUserlistGsoapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDomainUserlistGsoapCompleted(this, new getDomainUserlistGsoapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDomainUserlistLengthGsoapReturn")]
        public int getDomainUserlistLengthGsoap(string domain, string account, string sign) {
            object[] results = this.Invoke("getDomainUserlistLengthGsoap", new object[] {
                        domain,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getDomainUserlistLengthGsoapAsync(string domain, string account, string sign) {
            this.getDomainUserlistLengthGsoapAsync(domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getDomainUserlistLengthGsoapAsync(string domain, string account, string sign, object userState) {
            if ((this.getDomainUserlistLengthGsoapOperationCompleted == null)) {
                this.getDomainUserlistLengthGsoapOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDomainUserlistLengthGsoapOperationCompleted);
            }
            this.InvokeAsync("getDomainUserlistLengthGsoap", new object[] {
                        domain,
                        account,
                        sign}, this.getDomainUserlistLengthGsoapOperationCompleted, userState);
        }
        
        private void OngetDomainUserlistLengthGsoapOperationCompleted(object arg) {
            if ((this.getDomainUserlistLengthGsoapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDomainUserlistLengthGsoapCompleted(this, new getDomainUserlistLengthGsoapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSaasDomainUserlistReturn")]
        public string GetSaasDomainUserlist(string domain, string userid, string passwd) {
            object[] results = this.Invoke("GetSaasDomainUserlist", new object[] {
                        domain,
                        userid,
                        passwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSaasDomainUserlistAsync(string domain, string userid, string passwd) {
            this.GetSaasDomainUserlistAsync(domain, userid, passwd, null);
        }
        
        /// <remarks/>
        public void GetSaasDomainUserlistAsync(string domain, string userid, string passwd, object userState) {
            if ((this.GetSaasDomainUserlistOperationCompleted == null)) {
                this.GetSaasDomainUserlistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSaasDomainUserlistOperationCompleted);
            }
            this.InvokeAsync("GetSaasDomainUserlist", new object[] {
                        domain,
                        userid,
                        passwd}, this.GetSaasDomainUserlistOperationCompleted, userState);
        }
        
        private void OnGetSaasDomainUserlistOperationCompleted(object arg) {
            if ((this.GetSaasDomainUserlistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSaasDomainUserlistCompleted(this, new GetSaasDomainUserlistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetUserInfoReturn")]
        public string GetUserInfo(string userid, string domain) {
            object[] results = this.Invoke("GetUserInfo", new object[] {
                        userid,
                        domain});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(string userid, string domain) {
            this.GetUserInfoAsync(userid, domain, null);
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(string userid, string domain, object userState) {
            if ((this.GetUserInfoOperationCompleted == null)) {
                this.GetUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetUserInfo", new object[] {
                        userid,
                        domain}, this.GetUserInfoOperationCompleted, userState);
        }
        
        private void OnGetUserInfoOperationCompleted(object arg) {
            if ((this.GetUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getUserInfo_NewReturn")]
        public string getUserInfo_New(string userid, string domain, string account, string sign) {
            object[] results = this.Invoke("getUserInfo_New", new object[] {
                        userid,
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserInfo_NewAsync(string userid, string domain, string account, string sign) {
            this.getUserInfo_NewAsync(userid, domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getUserInfo_NewAsync(string userid, string domain, string account, string sign, object userState) {
            if ((this.getUserInfo_NewOperationCompleted == null)) {
                this.getUserInfo_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserInfo_NewOperationCompleted);
            }
            this.InvokeAsync("getUserInfo_New", new object[] {
                        userid,
                        domain,
                        account,
                        sign}, this.getUserInfo_NewOperationCompleted, userState);
        }
        
        private void OngetUserInfo_NewOperationCompleted(object arg) {
            if ((this.getUserInfo_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserInfo_NewCompleted(this, new getUserInfo_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDisGroupUserReturn")]
        public string getDisGroupUser(int deptId, string domain, string account, string sign) {
            object[] results = this.Invoke("getDisGroupUser", new object[] {
                        deptId,
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDisGroupUserAsync(int deptId, string domain, string account, string sign) {
            this.getDisGroupUserAsync(deptId, domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getDisGroupUserAsync(int deptId, string domain, string account, string sign, object userState) {
            if ((this.getDisGroupUserOperationCompleted == null)) {
                this.getDisGroupUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDisGroupUserOperationCompleted);
            }
            this.InvokeAsync("getDisGroupUser", new object[] {
                        deptId,
                        domain,
                        account,
                        sign}, this.getDisGroupUserOperationCompleted, userState);
        }
        
        private void OngetDisGroupUserOperationCompleted(object arg) {
            if ((this.getDisGroupUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDisGroupUserCompleted(this, new getDisGroupUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getAllXmaillistReturn")]
        public string getAllXmaillist(string domain, string account, string sign) {
            object[] results = this.Invoke("getAllXmaillist", new object[] {
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllXmaillistAsync(string domain, string account, string sign) {
            this.getAllXmaillistAsync(domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getAllXmaillistAsync(string domain, string account, string sign, object userState) {
            if ((this.getAllXmaillistOperationCompleted == null)) {
                this.getAllXmaillistOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllXmaillistOperationCompleted);
            }
            this.InvokeAsync("getAllXmaillist", new object[] {
                        domain,
                        account,
                        sign}, this.getAllXmaillistOperationCompleted, userState);
        }
        
        private void OngetAllXmaillistOperationCompleted(object arg) {
            if ((this.getAllXmaillistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllXmaillistCompleted(this, new getAllXmaillistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getXmaillistByNameReturn")]
        public string getXmaillistByName(string name, string domain, string account, string sign) {
            object[] results = this.Invoke("getXmaillistByName", new object[] {
                        name,
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getXmaillistByNameAsync(string name, string domain, string account, string sign) {
            this.getXmaillistByNameAsync(name, domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getXmaillistByNameAsync(string name, string domain, string account, string sign, object userState) {
            if ((this.getXmaillistByNameOperationCompleted == null)) {
                this.getXmaillistByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetXmaillistByNameOperationCompleted);
            }
            this.InvokeAsync("getXmaillistByName", new object[] {
                        name,
                        domain,
                        account,
                        sign}, this.getXmaillistByNameOperationCompleted, userState);
        }
        
        private void OngetXmaillistByNameOperationCompleted(object arg) {
            if ((this.getXmaillistByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getXmaillistByNameCompleted(this, new getXmaillistByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("isXmailUserExistReturn")]
        public string isXmailUserExist(string userId, string domain, string account, string sign) {
            object[] results = this.Invoke("isXmailUserExist", new object[] {
                        userId,
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void isXmailUserExistAsync(string userId, string domain, string account, string sign) {
            this.isXmailUserExistAsync(userId, domain, account, sign, null);
        }
        
        /// <remarks/>
        public void isXmailUserExistAsync(string userId, string domain, string account, string sign, object userState) {
            if ((this.isXmailUserExistOperationCompleted == null)) {
                this.isXmailUserExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisXmailUserExistOperationCompleted);
            }
            this.InvokeAsync("isXmailUserExist", new object[] {
                        userId,
                        domain,
                        account,
                        sign}, this.isXmailUserExistOperationCompleted, userState);
        }
        
        private void OnisXmailUserExistOperationCompleted(object arg) {
            if ((this.isXmailUserExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isXmailUserExistCompleted(this, new isXmailUserExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("regXmailListReturn")]
        public string regXmailList(string name, string description, string members, string domain, string account, string sign) {
            object[] results = this.Invoke("regXmailList", new object[] {
                        name,
                        description,
                        members,
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void regXmailListAsync(string name, string description, string members, string domain, string account, string sign) {
            this.regXmailListAsync(name, description, members, domain, account, sign, null);
        }
        
        /// <remarks/>
        public void regXmailListAsync(string name, string description, string members, string domain, string account, string sign, object userState) {
            if ((this.regXmailListOperationCompleted == null)) {
                this.regXmailListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregXmailListOperationCompleted);
            }
            this.InvokeAsync("regXmailList", new object[] {
                        name,
                        description,
                        members,
                        domain,
                        account,
                        sign}, this.regXmailListOperationCompleted, userState);
        }
        
        private void OnregXmailListOperationCompleted(object arg) {
            if ((this.regXmailListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.regXmailListCompleted(this, new regXmailListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("deleteXmailListByNameReturn")]
        public string deleteXmailListByName(string name, string domain, string account, string sign) {
            object[] results = this.Invoke("deleteXmailListByName", new object[] {
                        name,
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteXmailListByNameAsync(string name, string domain, string account, string sign) {
            this.deleteXmailListByNameAsync(name, domain, account, sign, null);
        }
        
        /// <remarks/>
        public void deleteXmailListByNameAsync(string name, string domain, string account, string sign, object userState) {
            if ((this.deleteXmailListByNameOperationCompleted == null)) {
                this.deleteXmailListByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteXmailListByNameOperationCompleted);
            }
            this.InvokeAsync("deleteXmailListByName", new object[] {
                        name,
                        domain,
                        account,
                        sign}, this.deleteXmailListByNameOperationCompleted, userState);
        }
        
        private void OndeleteXmailListByNameOperationCompleted(object arg) {
            if ((this.deleteXmailListByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteXmailListByNameCompleted(this, new deleteXmailListByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("updateXmailListByNameReturn")]
        public string updateXmailListByName(string oldname, string newname, string description, string members, string domain, string account, string sign) {
            object[] results = this.Invoke("updateXmailListByName", new object[] {
                        oldname,
                        newname,
                        description,
                        members,
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateXmailListByNameAsync(string oldname, string newname, string description, string members, string domain, string account, string sign) {
            this.updateXmailListByNameAsync(oldname, newname, description, members, domain, account, sign, null);
        }
        
        /// <remarks/>
        public void updateXmailListByNameAsync(string oldname, string newname, string description, string members, string domain, string account, string sign, object userState) {
            if ((this.updateXmailListByNameOperationCompleted == null)) {
                this.updateXmailListByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateXmailListByNameOperationCompleted);
            }
            this.InvokeAsync("updateXmailListByName", new object[] {
                        oldname,
                        newname,
                        description,
                        members,
                        domain,
                        account,
                        sign}, this.updateXmailListByNameOperationCompleted, userState);
        }
        
        private void OnupdateXmailListByNameOperationCompleted(object arg) {
            if ((this.updateXmailListByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateXmailListByNameCompleted(this, new updateXmailListByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("modUserStatus_NewReturn")]
        public int modUserStatus_New(string userid, string domain, int status, string account, string sign) {
            object[] results = this.Invoke("modUserStatus_New", new object[] {
                        userid,
                        domain,
                        status,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void modUserStatus_NewAsync(string userid, string domain, int status, string account, string sign) {
            this.modUserStatus_NewAsync(userid, domain, status, account, sign, null);
        }
        
        /// <remarks/>
        public void modUserStatus_NewAsync(string userid, string domain, int status, string account, string sign, object userState) {
            if ((this.modUserStatus_NewOperationCompleted == null)) {
                this.modUserStatus_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodUserStatus_NewOperationCompleted);
            }
            this.InvokeAsync("modUserStatus_New", new object[] {
                        userid,
                        domain,
                        status,
                        account,
                        sign}, this.modUserStatus_NewOperationCompleted, userState);
        }
        
        private void OnmodUserStatus_NewOperationCompleted(object arg) {
            if ((this.modUserStatus_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.modUserStatus_NewCompleted(this, new modUserStatus_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("modDomainCos_NewReturn")]
        public int modDomainCos_New(string domain, int cos, string account, string sign) {
            object[] results = this.Invoke("modDomainCos_New", new object[] {
                        domain,
                        cos,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void modDomainCos_NewAsync(string domain, int cos, string account, string sign) {
            this.modDomainCos_NewAsync(domain, cos, account, sign, null);
        }
        
        /// <remarks/>
        public void modDomainCos_NewAsync(string domain, int cos, string account, string sign, object userState) {
            if ((this.modDomainCos_NewOperationCompleted == null)) {
                this.modDomainCos_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodDomainCos_NewOperationCompleted);
            }
            this.InvokeAsync("modDomainCos_New", new object[] {
                        domain,
                        cos,
                        account,
                        sign}, this.modDomainCos_NewOperationCompleted, userState);
        }
        
        private void OnmodDomainCos_NewOperationCompleted(object arg) {
            if ((this.modDomainCos_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.modDomainCos_NewCompleted(this, new modDomainCos_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getDomainInfo_newReturn")]
        public string getDomainInfo_new(string domainname, string account, string sign) {
            object[] results = this.Invoke("getDomainInfo_new", new object[] {
                        domainname,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDomainInfo_newAsync(string domainname, string account, string sign) {
            this.getDomainInfo_newAsync(domainname, account, sign, null);
        }
        
        /// <remarks/>
        public void getDomainInfo_newAsync(string domainname, string account, string sign, object userState) {
            if ((this.getDomainInfo_newOperationCompleted == null)) {
                this.getDomainInfo_newOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDomainInfo_newOperationCompleted);
            }
            this.InvokeAsync("getDomainInfo_new", new object[] {
                        domainname,
                        account,
                        sign}, this.getDomainInfo_newOperationCompleted, userState);
        }
        
        private void OngetDomainInfo_newOperationCompleted(object arg) {
            if ((this.getDomainInfo_newCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDomainInfo_newCompleted(this, new getDomainInfo_newCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("modDomainWeChatReturn")]
        public int modDomainWeChat(string domain, int cos, string account, string sign) {
            object[] results = this.Invoke("modDomainWeChat", new object[] {
                        domain,
                        cos,
                        account,
                        sign});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void modDomainWeChatAsync(string domain, int cos, string account, string sign) {
            this.modDomainWeChatAsync(domain, cos, account, sign, null);
        }
        
        /// <remarks/>
        public void modDomainWeChatAsync(string domain, int cos, string account, string sign, object userState) {
            if ((this.modDomainWeChatOperationCompleted == null)) {
                this.modDomainWeChatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodDomainWeChatOperationCompleted);
            }
            this.InvokeAsync("modDomainWeChat", new object[] {
                        domain,
                        cos,
                        account,
                        sign}, this.modDomainWeChatOperationCompleted, userState);
        }
        
        private void OnmodDomainWeChatOperationCompleted(object arg) {
            if ((this.modDomainWeChatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.modDomainWeChatCompleted(this, new modDomainWeChatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getUserByWechatReturn")]
        public string getUserByWechat(string userid, int type, int querytype, string domain, string account, string sign) {
            object[] results = this.Invoke("getUserByWechat", new object[] {
                        userid,
                        type,
                        querytype,
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserByWechatAsync(string userid, int type, int querytype, string domain, string account, string sign) {
            this.getUserByWechatAsync(userid, type, querytype, domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getUserByWechatAsync(string userid, int type, int querytype, string domain, string account, string sign, object userState) {
            if ((this.getUserByWechatOperationCompleted == null)) {
                this.getUserByWechatOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserByWechatOperationCompleted);
            }
            this.InvokeAsync("getUserByWechat", new object[] {
                        userid,
                        type,
                        querytype,
                        domain,
                        account,
                        sign}, this.getUserByWechatOperationCompleted, userState);
        }
        
        private void OngetUserByWechatOperationCompleted(object arg) {
            if ((this.getUserByWechatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserByWechatCompleted(this, new getUserByWechatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("saveOrUpdateAppReturn")]
        public string saveOrUpdateApp(
                    string appid, 
                    string apppwd, 
                    string domain, 
                    string name, 
                    string appshowtype, 
                    string appuacflag, 
                    string appurl, 
                    int awwidth, 
                    int awheight, 
                    string sessshowtype, 
                    string sessuacflag, 
                    string sessurl, 
                    int swwidth, 
                    int swheight, 
                    string show, 
                    int sort, 
                    string iplimit, 
                    string appdesc, 
                    long id, 
                    long icon, 
                    long top, 
                    string apptype, 
                    string saastype, 
                    string exdomain, 
                    string filename, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] image, 
                    string type, 
                    string account, 
                    string sign) {
            object[] results = this.Invoke("saveOrUpdateApp", new object[] {
                        appid,
                        apppwd,
                        domain,
                        name,
                        appshowtype,
                        appuacflag,
                        appurl,
                        awwidth,
                        awheight,
                        sessshowtype,
                        sessuacflag,
                        sessurl,
                        swwidth,
                        swheight,
                        show,
                        sort,
                        iplimit,
                        appdesc,
                        id,
                        icon,
                        top,
                        apptype,
                        saastype,
                        exdomain,
                        filename,
                        image,
                        type,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void saveOrUpdateAppAsync(
                    string appid, 
                    string apppwd, 
                    string domain, 
                    string name, 
                    string appshowtype, 
                    string appuacflag, 
                    string appurl, 
                    int awwidth, 
                    int awheight, 
                    string sessshowtype, 
                    string sessuacflag, 
                    string sessurl, 
                    int swwidth, 
                    int swheight, 
                    string show, 
                    int sort, 
                    string iplimit, 
                    string appdesc, 
                    long id, 
                    long icon, 
                    long top, 
                    string apptype, 
                    string saastype, 
                    string exdomain, 
                    string filename, 
                    byte[] image, 
                    string type, 
                    string account, 
                    string sign) {
            this.saveOrUpdateAppAsync(appid, apppwd, domain, name, appshowtype, appuacflag, appurl, awwidth, awheight, sessshowtype, sessuacflag, sessurl, swwidth, swheight, show, sort, iplimit, appdesc, id, icon, top, apptype, saastype, exdomain, filename, image, type, account, sign, null);
        }
        
        /// <remarks/>
        public void saveOrUpdateAppAsync(
                    string appid, 
                    string apppwd, 
                    string domain, 
                    string name, 
                    string appshowtype, 
                    string appuacflag, 
                    string appurl, 
                    int awwidth, 
                    int awheight, 
                    string sessshowtype, 
                    string sessuacflag, 
                    string sessurl, 
                    int swwidth, 
                    int swheight, 
                    string show, 
                    int sort, 
                    string iplimit, 
                    string appdesc, 
                    long id, 
                    long icon, 
                    long top, 
                    string apptype, 
                    string saastype, 
                    string exdomain, 
                    string filename, 
                    byte[] image, 
                    string type, 
                    string account, 
                    string sign, 
                    object userState) {
            if ((this.saveOrUpdateAppOperationCompleted == null)) {
                this.saveOrUpdateAppOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveOrUpdateAppOperationCompleted);
            }
            this.InvokeAsync("saveOrUpdateApp", new object[] {
                        appid,
                        apppwd,
                        domain,
                        name,
                        appshowtype,
                        appuacflag,
                        appurl,
                        awwidth,
                        awheight,
                        sessshowtype,
                        sessuacflag,
                        sessurl,
                        swwidth,
                        swheight,
                        show,
                        sort,
                        iplimit,
                        appdesc,
                        id,
                        icon,
                        top,
                        apptype,
                        saastype,
                        exdomain,
                        filename,
                        image,
                        type,
                        account,
                        sign}, this.saveOrUpdateAppOperationCompleted, userState);
        }
        
        private void OnsaveOrUpdateAppOperationCompleted(object arg) {
            if ((this.saveOrUpdateAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveOrUpdateAppCompleted(this, new saveOrUpdateAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("batdelAppReturn")]
        public string batdelApp(string domain, string account, string sign, [System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)] string[] appids) {
            object[] results = this.Invoke("batdelApp", new object[] {
                        domain,
                        account,
                        sign,
                        appids});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void batdelAppAsync(string domain, string account, string sign, string[] appids) {
            this.batdelAppAsync(domain, account, sign, appids, null);
        }
        
        /// <remarks/>
        public void batdelAppAsync(string domain, string account, string sign, string[] appids, object userState) {
            if ((this.batdelAppOperationCompleted == null)) {
                this.batdelAppOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbatdelAppOperationCompleted);
            }
            this.InvokeAsync("batdelApp", new object[] {
                        domain,
                        account,
                        sign,
                        appids}, this.batdelAppOperationCompleted, userState);
        }
        
        private void OnbatdelAppOperationCompleted(object arg) {
            if ((this.batdelAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.batdelAppCompleted(this, new batdelAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("getAllAppReturn")]
        public string getAllApp(string domain, string account, string sign) {
            object[] results = this.Invoke("getAllApp", new object[] {
                        domain,
                        account,
                        sign});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllAppAsync(string domain, string account, string sign) {
            this.getAllAppAsync(domain, account, sign, null);
        }
        
        /// <remarks/>
        public void getAllAppAsync(string domain, string account, string sign, object userState) {
            if ((this.getAllAppOperationCompleted == null)) {
                this.getAllAppOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllAppOperationCompleted);
            }
            this.InvokeAsync("getAllApp", new object[] {
                        domain,
                        account,
                        sign}, this.getAllAppOperationCompleted, userState);
        }
        
        private void OngetAllAppOperationCompleted(object arg) {
            if ((this.getAllAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllAppCompleted(this, new getAllAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("regUserAndGroupTypeReturn")]
        public int regUserAndGroupType(
                    string userid, 
                    string domain, 
                    string passwd, 
                    int crypttype, 
                    int gid, 
                    int departmentid, 
                    string username, 
                    string offic, 
                    string mobile, 
                    string phone, 
                    string fax, 
                    string alias, 
                    string alias2, 
                    int roleId, 
                    int changepwd, 
                    string account, 
                    string sign, 
                    int grouptype) {
            object[] results = this.Invoke("regUserAndGroupType", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        gid,
                        departmentid,
                        username,
                        offic,
                        mobile,
                        phone,
                        fax,
                        alias,
                        alias2,
                        roleId,
                        changepwd,
                        account,
                        sign,
                        grouptype});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void regUserAndGroupTypeAsync(
                    string userid, 
                    string domain, 
                    string passwd, 
                    int crypttype, 
                    int gid, 
                    int departmentid, 
                    string username, 
                    string offic, 
                    string mobile, 
                    string phone, 
                    string fax, 
                    string alias, 
                    string alias2, 
                    int roleId, 
                    int changepwd, 
                    string account, 
                    string sign, 
                    int grouptype) {
            this.regUserAndGroupTypeAsync(userid, domain, passwd, crypttype, gid, departmentid, username, offic, mobile, phone, fax, alias, alias2, roleId, changepwd, account, sign, grouptype, null);
        }
        
        /// <remarks/>
        public void regUserAndGroupTypeAsync(
                    string userid, 
                    string domain, 
                    string passwd, 
                    int crypttype, 
                    int gid, 
                    int departmentid, 
                    string username, 
                    string offic, 
                    string mobile, 
                    string phone, 
                    string fax, 
                    string alias, 
                    string alias2, 
                    int roleId, 
                    int changepwd, 
                    string account, 
                    string sign, 
                    int grouptype, 
                    object userState) {
            if ((this.regUserAndGroupTypeOperationCompleted == null)) {
                this.regUserAndGroupTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregUserAndGroupTypeOperationCompleted);
            }
            this.InvokeAsync("regUserAndGroupType", new object[] {
                        userid,
                        domain,
                        passwd,
                        crypttype,
                        gid,
                        departmentid,
                        username,
                        offic,
                        mobile,
                        phone,
                        fax,
                        alias,
                        alias2,
                        roleId,
                        changepwd,
                        account,
                        sign,
                        grouptype}, this.regUserAndGroupTypeOperationCompleted, userState);
        }
        
        private void OnregUserAndGroupTypeOperationCompleted(object arg) {
            if ((this.regUserAndGroupTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.regUserAndGroupTypeCompleted(this, new regUserAndGroupTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("modUserInfoAndGroupTypeReturn")]
        public int modUserInfoAndGroupType(string userid, string domain, int departmentid, string username, string office, string mobile, string phone, string fax, string alias, string alias2, string account, string sign, int grouptype) {
            object[] results = this.Invoke("modUserInfoAndGroupType", new object[] {
                        userid,
                        domain,
                        departmentid,
                        username,
                        office,
                        mobile,
                        phone,
                        fax,
                        alias,
                        alias2,
                        account,
                        sign,
                        grouptype});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void modUserInfoAndGroupTypeAsync(string userid, string domain, int departmentid, string username, string office, string mobile, string phone, string fax, string alias, string alias2, string account, string sign, int grouptype) {
            this.modUserInfoAndGroupTypeAsync(userid, domain, departmentid, username, office, mobile, phone, fax, alias, alias2, account, sign, grouptype, null);
        }
        
        /// <remarks/>
        public void modUserInfoAndGroupTypeAsync(string userid, string domain, int departmentid, string username, string office, string mobile, string phone, string fax, string alias, string alias2, string account, string sign, int grouptype, object userState) {
            if ((this.modUserInfoAndGroupTypeOperationCompleted == null)) {
                this.modUserInfoAndGroupTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodUserInfoAndGroupTypeOperationCompleted);
            }
            this.InvokeAsync("modUserInfoAndGroupType", new object[] {
                        userid,
                        domain,
                        departmentid,
                        username,
                        office,
                        mobile,
                        phone,
                        fax,
                        alias,
                        alias2,
                        account,
                        sign,
                        grouptype}, this.modUserInfoAndGroupTypeOperationCompleted, userState);
        }
        
        private void OnmodUserInfoAndGroupTypeOperationCompleted(object arg) {
            if ((this.modUserInfoAndGroupTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.modUserInfoAndGroupTypeCompleted(this, new modUserInfoAndGroupTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("regXmailListAndPriviReturn")]
        public string regXmailListAndPrivi(string name, string description, string domain, string account, string sign, string members, int listprivi, string prividept, string privideptname, string priviuser, string prividomain, string grouptype) {
            object[] results = this.Invoke("regXmailListAndPrivi", new object[] {
                        name,
                        description,
                        domain,
                        account,
                        sign,
                        members,
                        listprivi,
                        prividept,
                        privideptname,
                        priviuser,
                        prividomain,
                        grouptype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void regXmailListAndPriviAsync(string name, string description, string domain, string account, string sign, string members, int listprivi, string prividept, string privideptname, string priviuser, string prividomain, string grouptype) {
            this.regXmailListAndPriviAsync(name, description, domain, account, sign, members, listprivi, prividept, privideptname, priviuser, prividomain, grouptype, null);
        }
        
        /// <remarks/>
        public void regXmailListAndPriviAsync(string name, string description, string domain, string account, string sign, string members, int listprivi, string prividept, string privideptname, string priviuser, string prividomain, string grouptype, object userState) {
            if ((this.regXmailListAndPriviOperationCompleted == null)) {
                this.regXmailListAndPriviOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregXmailListAndPriviOperationCompleted);
            }
            this.InvokeAsync("regXmailListAndPrivi", new object[] {
                        name,
                        description,
                        domain,
                        account,
                        sign,
                        members,
                        listprivi,
                        prividept,
                        privideptname,
                        priviuser,
                        prividomain,
                        grouptype}, this.regXmailListAndPriviOperationCompleted, userState);
        }
        
        private void OnregXmailListAndPriviOperationCompleted(object arg) {
            if ((this.regXmailListAndPriviCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.regXmailListAndPriviCompleted(this, new regXmailListAndPriviCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://xmapi.webservices.ma.net263.com", ResponseNamespace="http://xmapi.webservices.ma.net263.com", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("updateXmailListAndPriviReturn")]
        public string updateXmailListAndPrivi(string oldname, string newname, string description, string members, string domain, string account, string sign, int memberstype, string grouptype) {
            object[] results = this.Invoke("updateXmailListAndPrivi", new object[] {
                        oldname,
                        newname,
                        description,
                        members,
                        domain,
                        account,
                        sign,
                        memberstype,
                        grouptype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateXmailListAndPriviAsync(string oldname, string newname, string description, string members, string domain, string account, string sign, int memberstype, string grouptype) {
            this.updateXmailListAndPriviAsync(oldname, newname, description, members, domain, account, sign, memberstype, grouptype, null);
        }
        
        /// <remarks/>
        public void updateXmailListAndPriviAsync(string oldname, string newname, string description, string members, string domain, string account, string sign, int memberstype, string grouptype, object userState) {
            if ((this.updateXmailListAndPriviOperationCompleted == null)) {
                this.updateXmailListAndPriviOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateXmailListAndPriviOperationCompleted);
            }
            this.InvokeAsync("updateXmailListAndPrivi", new object[] {
                        oldname,
                        newname,
                        description,
                        members,
                        domain,
                        account,
                        sign,
                        memberstype,
                        grouptype}, this.updateXmailListAndPriviOperationCompleted, userState);
        }
        
        private void OnupdateXmailListAndPriviOperationCompleted(object arg) {
            if ((this.updateXmailListAndPriviCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateXmailListAndPriviCompleted(this, new updateXmailListAndPriviCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getVersionCompletedEventHandler(object sender, getVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getManagementDomainCompletedEventHandler(object sender, getManagementDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getManagementDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getManagementDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getDomainDisGroupUserCompletedEventHandler(object sender, getDomainDisGroupUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDomainDisGroupUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDomainDisGroupUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void deleteXmailuserExpiredCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void updateDepartmentCompletedEventHandler(object sender, updateDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void createDepartmentCompletedEventHandler(object sender, createDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void createDisGroupUserCompletedEventHandler(object sender, createDisGroupUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createDisGroupUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createDisGroupUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getDepartmentCompletedEventHandler(object sender, getDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void RegUserCompletedEventHandler(object sender, RegUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void regUser_NewCompletedEventHandler(object sender, regUser_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class regUser_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal regUser_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void regUser_MultiCompletedEventHandler(object sender, regUser_MultiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class regUser_MultiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal regUser_MultiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void DelUserCompletedEventHandler(object sender, DelUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void delUser_NewCompletedEventHandler(object sender, delUser_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delUser_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delUser_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void ModPasswdCompletedEventHandler(object sender, ModPasswdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModPasswdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModPasswdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void modPasswd_NewCompletedEventHandler(object sender, modPasswd_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class modPasswd_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal modPasswd_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void GetDirInfoCompletedEventHandler(object sender, GetDirInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDirInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDirInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getDirInfo_NewCompletedEventHandler(object sender, getDirInfo_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDirInfo_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDirInfo_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void AspGetDomainUserlistCompletedEventHandler(object sender, AspGetDomainUserlistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AspGetDomainUserlistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AspGetDomainUserlistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void ModGidCompletedEventHandler(object sender, ModGidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModGidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModGidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void modGid_NewCompletedEventHandler(object sender, modGid_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class modGid_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal modGid_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void AuthenticationCompletedEventHandler(object sender, AuthenticationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void authentication_NewCompletedEventHandler(object sender, authentication_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class authentication_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal authentication_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void authenticationManager_NewCompletedEventHandler(object sender, authenticationManager_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class authenticationManager_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal authenticationManager_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void ModStatusCompletedEventHandler(object sender, ModStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void modStatus_NewCompletedEventHandler(object sender, modStatus_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class modStatus_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal modStatus_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void ModUserInfoCompletedEventHandler(object sender, ModUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void modUserInfo_NewCompletedEventHandler(object sender, modUserInfo_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class modUserInfo_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal modUserInfo_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void modUserInfoSupportMultiAliasCompletedEventHandler(object sender, modUserInfoSupportMultiAliasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class modUserInfoSupportMultiAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal modUserInfoSupportMultiAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void modUserInfo_MultiCompletedEventHandler(object sender, modUserInfo_MultiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class modUserInfo_MultiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal modUserInfo_MultiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void deleteDepartmentCompletedEventHandler(object sender, deleteDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void createDisGroupCompletedEventHandler(object sender, createDisGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createDisGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createDisGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void deleteDisGroupUserCompletedEventHandler(object sender, deleteDisGroupUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteDisGroupUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteDisGroupUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void createDisGroupUser_NewCompletedEventHandler(object sender, createDisGroupUser_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createDisGroupUser_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createDisGroupUser_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void updateDisGroupCompletedEventHandler(object sender, updateDisGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateDisGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateDisGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void deleteDisGroupCompletedEventHandler(object sender, deleteDisGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteDisGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteDisGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getDisGroupCompletedEventHandler(object sender, getDisGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDisGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDisGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void GetDomainUserlistCompletedEventHandler(object sender, GetDomainUserlistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainUserlistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainUserlistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getDomainUserlist_NewCompletedEventHandler(object sender, getDomainUserlist_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDomainUserlist_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDomainUserlist_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getDomainUserlistAndAlias_NewCompletedEventHandler(object sender, getDomainUserlistAndAlias_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDomainUserlistAndAlias_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDomainUserlistAndAlias_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getDomainUserlistByStatusCompletedEventHandler(object sender, getDomainUserlistByStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDomainUserlistByStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDomainUserlistByStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getDomainUserlistGsoapCompletedEventHandler(object sender, getDomainUserlistGsoapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDomainUserlistGsoapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDomainUserlistGsoapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getDomainUserlistLengthGsoapCompletedEventHandler(object sender, getDomainUserlistLengthGsoapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDomainUserlistLengthGsoapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDomainUserlistLengthGsoapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void GetSaasDomainUserlistCompletedEventHandler(object sender, GetSaasDomainUserlistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSaasDomainUserlistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSaasDomainUserlistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void GetUserInfoCompletedEventHandler(object sender, GetUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getUserInfo_NewCompletedEventHandler(object sender, getUserInfo_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserInfo_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserInfo_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getDisGroupUserCompletedEventHandler(object sender, getDisGroupUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDisGroupUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDisGroupUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getAllXmaillistCompletedEventHandler(object sender, getAllXmaillistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllXmaillistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllXmaillistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getXmaillistByNameCompletedEventHandler(object sender, getXmaillistByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getXmaillistByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getXmaillistByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void isXmailUserExistCompletedEventHandler(object sender, isXmailUserExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isXmailUserExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isXmailUserExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void regXmailListCompletedEventHandler(object sender, regXmailListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class regXmailListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal regXmailListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void deleteXmailListByNameCompletedEventHandler(object sender, deleteXmailListByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteXmailListByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteXmailListByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void updateXmailListByNameCompletedEventHandler(object sender, updateXmailListByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateXmailListByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateXmailListByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void modUserStatus_NewCompletedEventHandler(object sender, modUserStatus_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class modUserStatus_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal modUserStatus_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void modDomainCos_NewCompletedEventHandler(object sender, modDomainCos_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class modDomainCos_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal modDomainCos_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getDomainInfo_newCompletedEventHandler(object sender, getDomainInfo_newCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDomainInfo_newCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDomainInfo_newCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void modDomainWeChatCompletedEventHandler(object sender, modDomainWeChatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class modDomainWeChatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal modDomainWeChatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getUserByWechatCompletedEventHandler(object sender, getUserByWechatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserByWechatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserByWechatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void saveOrUpdateAppCompletedEventHandler(object sender, saveOrUpdateAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveOrUpdateAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveOrUpdateAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void batdelAppCompletedEventHandler(object sender, batdelAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class batdelAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal batdelAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void getAllAppCompletedEventHandler(object sender, getAllAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void regUserAndGroupTypeCompletedEventHandler(object sender, regUserAndGroupTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class regUserAndGroupTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal regUserAndGroupTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void modUserInfoAndGroupTypeCompletedEventHandler(object sender, modUserInfoAndGroupTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class modUserInfoAndGroupTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal modUserInfoAndGroupTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void regXmailListAndPriviCompletedEventHandler(object sender, regXmailListAndPriviCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class regXmailListAndPriviCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal regXmailListAndPriviCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void updateXmailListAndPriviCompletedEventHandler(object sender, updateXmailListAndPriviCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateXmailListAndPriviCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateXmailListAndPriviCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591